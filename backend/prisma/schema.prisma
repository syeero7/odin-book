// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  githubId         String?        @unique
  username         String         @unique
  avatarUrl        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  followers        User[]         @relation("Follows")
  following        User[]         @relation("Follows")
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  notification     Notification[] @relation("sender")
  sentNotification Notification[] @relation("recipient")
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String
  content      String?
  imageUrl     String?
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comments     Comment[]
  likes        Like[]
  notification Notification[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([postId, userId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  type        Type
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int?
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    Int
  recipient   User     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int
  createdAt   DateTime @default(now())
}

enum Type {
  LIKE
  COMMENT
  FOLLOW
}
